generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id              String           @id @default(cuid())
  name            String
  email           String?          @unique
  emailVerified   DateTime?
  image           String?
  verified        Boolean          @default(false)
  createdAt       DateTime         @default(now())
  accounts        Account[]
  sessions        Session[]
  asTeamMember    TeamMember?
  teamInvitations TeamInvitation[]
}

model Team {
  id              String           @id @default(cuid())
  name            String
  creatorId       String
  createdAt       DateTime         @default(now())
  members         TeamMember[]
  invitationsSent TeamInvitation[]
}

model TeamInvitation {
  teamId    String
  userId    String
  createdAt DateTime @default(now())
  team      Team     @relation(fields: [teamId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([teamId, userId])
}

model TeamMember {
  teamId    String
  userId    String   @unique
  isLeader  Boolean
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  team      Team     @relation(fields: [teamId], references: [id])

  @@id([teamId, userId])
}

model Tournament {
  id        String   @id
  title     String   @unique
  start     DateTime
  end       DateTime
  regStart  DateTime
  regEnd    DateTime
  prizePool Int
  entryFee  Int
  maxTeams  Int
  updatedAt DateTime @updatedAt
}
